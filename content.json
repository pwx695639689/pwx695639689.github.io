[{"title":"CSS中的布局详解笔记（四）","date":"2017-08-15T13:36:55.000Z","path":"2017/08/15/cssstudy6/","text":"CSS中的居中。 居中一直是css里比较关键的一个概念，在多数情况下居中往往有许多种方法。 水平居中行内元素居中： text-align：center;块级元素居中： margin：0 auto； //这种方法前提必须是要为元素设置宽度，否则宽度拉伸为父级的宽度，无法实现居中效果。 利用绝对定位的“子绝父相”法，给父元素设置相对定位，子元素设置绝对定位和transform： 12345678.container &#123; position:relative;&#125;.item &#123; position:absolute; left:50%; transform:translate(-50%);&#125; 利用flex实现居中:这里列举一种常见的方式，具体请参考上篇文章： CSS中的布局详解（三） 1234.container &#123; display:flex; justify-content:center;&#125; 垂直居中行内元素垂直居中： 单行行内或文本元素，可以设置等值的padding的top值和bottom值： 12padding-top:10px;padding-bottom:10px; 还有最常用的，让行高line-height和height值相等： 12height:50px;line-height:50px; vertical-align属性，但这个属性需要设置一个类似table-cell的父级容器： 12display: table-cell;vertical-align: middle; 块级元素： 在已知元素高度的情况下，可以利用定位来实现居中： 123456789.container &#123; position:relative;&#125;.item &#123; position: absolute; top: 50%; height:100px; margin-top: -50px;&#125; 在未知元素高度的情况下，首先需要定位到容器的中心，然后再使用transform和translate属性： 12345678.container &#123; position:relative;&#125;.item &#123; position: absolute; top:50%; transform: translateY(-50%);&#125; 利用flex实现垂直居中： 123456.container &#123; display:flex; flex-direction: column; justify-content: center; align-items: center; //加上这条属性，就是水平和垂直居中&#125; 简单实例：实现半透明遮罩123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .cover &#123; position: fixed; top: 0; left: 0; bottom: 0; right: 0; background-color: rgba(0,0,0,0.7); z-index: 100; &#125; .dialog &#123; width: 280px; text-align: center; position: fixed; background-color: #fff; border-radius: 5px; top: 50%; left: 50%; z-index: 101; transform: translate(-50%,-50%); &#125; .dialog .dialog-bd &#123; padding: 20px 10px; &#125; .dialog .dialog-ft &#123; display: flex; line-height: 44px; border-top: 1px solid #dbdbdb; &#125; .dialog .dialog-ft .ft-btn&#123; flex: 1; text-align: center; cursor: pointer; border-left: 1px solid #dbdbdb; &#125; .dialog .dialog-ft .ft-btn:first-child &#123; border-left: 0; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;cover&quot;&gt;&lt;/div&gt; &lt;div class=&quot;dialog&quot;&gt; &lt;div class=&quot;dialog-bd&quot;&gt; &lt;p class=&quot;dialog-text&quot;&gt;确认关闭窗口？&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;dialog-ft&quot;&gt; &lt;div class=&quot;ft-btn&quot;&gt;取消&lt;/div&gt; &lt;div class=&quot;ft-btn&quot;&gt;确定&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 参考资料： CSS居中 CSS居中完整指南 我的个人博客：http://chronosblog.top我的微信公众号：runtustory CSS布局详解系列索引： CSS中的布局详解（一）：视觉格式化模型 CSS中的布局详解（二）：浮动与定位 CSS中的布局详解（三）：flex布局","categories":[{"name":"编程","slug":"编程","permalink":"http://chronosblog.top/categories/编程/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://chronosblog.top/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://chronosblog.top/tags/前端/"}]},{"title":"CSS中的布局详解笔记（三）：flex布局","date":"2017-08-10T11:56:11.000Z","path":"2017/08/10/cssstudy5/","text":"CSS中的flex布局 Flex布局又名弹性布局，相比float+position布局，具有很强大的灵活性，而且目前已经得到了所有浏览器的兼容。 个人认为flex布局非常灵活好用，所以这里参考了阮一峰老师的flex教程以及NEXT课程中的文档，把flex布局的所有属性知识点自己动手实现一遍并总结。 Flex布局的使用如果想要使用Flex布局，首先需要给容器指定Flex布局。123display: flex;display: inline-flex; //行内元素也可使用display: -webkit-flex //Webkit浏览器内核需要加上前缀 在使用了flex布局之后，float，clear，vertical-align将失效。 Flex布局的基本概念flex布局中，有两个基本概念： 容器（flex container） 项目（flex item） 如图所示（图片来源网络）： 由图可见，容器中有两根主轴： 水平主轴（main axis） 开始位置（main start） 结束位置（main end） 垂直交叉轴（cross axis） 开始位置（cross start） 结束位置（cross end） 在容器中，项目默认沿着主轴排列，单个项目占据主轴空间叫做（main size），占据的交叉轴空间叫做（cross size）。 容器（flex container）的属性容器属性有6个： 1. flex-direction flex-direction决定了主轴的方向，也就是item排列的方向，有4个值： row（默认值）：主轴为水平方向，左端为起点 row-reverse：主轴为水平方向，右端为起点 column：主轴为垂直方向，上沿为起点 column-reverse：主轴为垂直方向，下沿为起点 2. flex-wrap flex-wrap属性是规定当一条轴线排列不下item的时候，该如何换行。（item在默认情况下是按照轴线排列成一条线），有三个值： nowrap（默认值）：不换行 wrap：换行，第一行在上方 wrap-reverse：换行，第一行在下方 3.flex-flow flex-flow是前两种属性的简写方式，可以写成如下形式：123.box &#123; flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;&#125; 4. justify-content justify-content定义了item在主轴上的对齐方式，可能取5个值 flex-start（默认值）：左对齐 flex-end：右对齐 center：居中 space-between：两端对齐，项目之间间隔都相等 space-around：每个项目两侧的间隔相等。所以项目之间的间隔比项目与边框的间隔大一倍。 5. alien-itemsalien-items定义item在交叉轴上如何对齐（此时交叉轴方向为从上至下），有5个值： flex-start：交叉轴的起点对齐 flex-end：交叉轴的终点对齐 center：交叉轴的中点对齐 baseline：项目的第一行文字的基线对齐这里有一个问题：基线（base line）并不是汉字文字的下端沿，而是英文字母“x”的下端沿。 stretch（默认值）：如果item未设置高度或者设置成auto，将占满整个容器宽度 6.align-contentalign-content定义了多跟轴线的对齐方式，如果item只有一根轴线，该属性不起作用，有6个值： flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴的中点对齐 space-between：与交叉轴两端对齐，轴线之间间隔平均分布 space-around：每根轴线两侧的间隔都相等，所以轴线之间的间隔比轴线与边框的间隔大一倍 stretch（默认值）：轴线占满整个交叉轴 item（子元素）的属性item的属性有6个： order：定义item的排列顺序，数值越小排列越靠前，默认为0。例如：将所有item的order属性设置为6、5、4、3、2、11234.item6&#123; order：6&#125;//以此类推 flex-grow：定义item的放大比例，默认为0，也就是如果有剩余空间，也不放大。例如：设置item1的flex-grow属性为2，其余为默认值。123.item1&#123; flex-grow：2;&#125; flex-shrink：定义item的缩小比例，默认为1，也就是空间不足的时候，此item会缩小。例如：给item5设置了flex-shrink属性为0，其他item皆为默认值1，在空间不足的时候，它不缩小。123.item &#123; flex-shrink：0;&#125; flex-basis:定义了在分配多余空间之前，项目占据的株洲空间。然后浏览器根据这个属性来计算主轴是否有多余的空间。默认值为auto，即item本来的大小。例如，给item5设置flex-basis属性为100px：123.item5 &#123; flex-basis：150px;&#125; flex:这个属性是前几种属性的简写，默认值为0 1 auto ，后两个可选。例如： 123item5 &#123; flex : flex: 2 2 10%;&#125; align-self：允许单个item和其他item有不一样的对齐方式，可覆盖align-items属性，默认值为auto，表示继承父元素的align-items属性，如果没有则等同于stretch。和align-items类似，同样有以下几种值： auto flex-start flex-end center baseline stretch 参考资料： 阮一峰Flex布局教程 我的个人博客：http://chronosblog.top我的微信公众号：runtustory","categories":[{"name":"编程","slug":"编程","permalink":"http://chronosblog.top/categories/编程/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://chronosblog.top/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://chronosblog.top/tags/前端/"}]},{"title":"CSS中的布局详解笔记（二）","date":"2017-08-07T07:11:23.000Z","path":"2017/08/07/cssstudy4/","text":"CSS中的浮动与定位 display：float 浮动详解在我刚开始学习CSS的时候，看到浮动这个概念，只知道是让一个盒子向左或向右移动，也仅仅在一些简单布局中使用，但后来遇到的许多坑让我意识到，搞清楚浮动究竟是什么还是非常有必要的。 通过查阅网上各种博客文档等，我总结出了浮动的定义：所谓浮动，就是让一个元素脱离标准文档流，漂浮在标准流之上，然后按照指定的方向向左或向右移动，碰到父级边界或者另外一个浮动元素停止。 在前面的总结中已经提到过什么是标准文档流，在布局的时候，浮动脱离标准文档流是非常必要的，比如我们想要让几个块级元素并排显示，这时候用浮动就会显得很方便。 在这篇文章中有关浮动的讲解非常好：CSS浮动 其中作者总结了一个很重要的概念： 假如某个DIV元素A是浮动的，如果A元素的上一个元素也是浮动的，那么A元素会跟随在上一个元素的后边（如果一行放不下这两个元素，那么A元素会被挤到下一行）;如果A元素上一个元素是标准流中的元素，那么A的相对垂直位置不会改变，也就是说A的顶部总是和上一个元素的底部对齐。 但浮动也会带来一个很严重的问题：浮动元素脱离标准文档流，会导致元素重叠或者父元素的高度塌陷。 这时候就要用到清除浮动。 清除浮动，顾名思义就是为了解决浮动带来的一系列问题，也可以理解为打破横向排列。 在上述的那篇文章中，作者还有一个总结很重要：清除浮动的这个规则，只能影响使用清除的元素本身，不能影响其他元素。 下面来总结几种常用的清除浮动的方式。 1. clear属性例如某个div元素前面的兄弟元素，如果有元素不想受到浮动元素的影响，那么就在这个浮动元素上使用 clear:both即可。 2.给父元素设置高度一般父元素没有设置高度的情况下，子元素浮动之后，父元素会忽略子元素的高度，导致父元素的高度产生塌陷，对于这样的问题，可以给父元素设置高度来解决。但这样做必然要计算好高度值才能够设置，因此除了给父元素设置高度，还可以用其他两种办法： 给最后一个元素设置clear：both 给父元素新建一个BFC 对于第二种方法，在前面的文章中提到过，创建一个BFC的办法有很多，不过在清除浮动中，比较常用的是 overflow:hidden属性。 overflow:hidden是干什么的呢？W3C给出的定义如下： overflow属性规定当内容溢出元素框时发生的事情。其中hidden代表内容会被修剪，并且其余内容是不可见的。 给父元素设置这个样式，不仅可以清除父级内使用float所产生的浮动，比起其他方法来说，显得更简洁明了。 但是好用归好用，为什么设置了这个样式就能够清除浮动？ 查阅了网上的各路大神的文章之后终于有了结论：overflow:hidden的作用是超出元素框部分的内容要被裁剪隐藏，这个裁剪隐藏是根据高度来定的，如果高度的默认值是auto，那么必须先要计算其中浮动元素的高度，也就是其真实高度，再去确定隐藏。overflow：hidden出发了BFC，使得这个元素中的子元素不能影响外部其他元素，所以必须要计算内容的全部高度，才能确定在什么地方开始隐藏。 3.：after方法这种方法是利用：after和：before来在元素内部插入两个元素快来达到清除浮动的效果，原理类似于clear：both。 示例代码如下：1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; outer &#123; zoom: 1; &#125; .outer :after &#123; clear: both; content: &apos;.&apos;; display: block; width: 0; height: 0; visibility: hidden; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;div1&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;div2&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;div3&quot;&gt;3&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; position属性position属性有4个值。 1.position：static默认值，元素都位于标准文档流中，不会受到top、bottom、left、right的影响。 2.position：relativerelative所产生的定位为相对定位，这种定位是相对于元素本身正常的位置，根据top、right、top、bottom等属性在标准文档流中偏移的位置。 设置相对定位属性的元素，无论如何移动，它原本所占的空间是不会变的，就好像在教室里的座位，无论你怎么移动，你的座位始终在那里占着。 而且，relative不会影响除自身以外其他元素的位置，大小。 3.position：absoluteabsolute所产生的定位又称为绝对定位，这种定位是直接将元素从标准文档流中拿出来，然后再使用top、right、left、bottom等属性来进行定位。绝对定位元素的位置相对于最近的已定位的父亲，如果元素没有已定位的父亲，那么这个元素位置相对于根元素，也就是html。 绝对定位的元素层叠性由z-index属性来控制，值越大，表明优先级越高，距离观察者越接近。 绝对定位元素能够脱离标准文档流，这一点和浮动有着异曲同工之妙，同样会造成父元素的塌陷，同时和浮动元素一样悬浮在标准文档流的上方，还会遮住下面的内容。 还有一些在使用过程当中应当注意的知识点： absolute能让inline元素被“块级”化。 absolute能让元素已有的float失效 相对定位元素一般用来作为绝对定位元素的容器块，也就是口诀：“子绝父相”。 4.position：fixedfixed和absolute基本一致，也完全脱离标准文档流，但关键区别在于fixed永远是根据浏览器确定位置，即使是窗口滚动他也不会动，所以叫做固定定位。 5.background-positionbackground-position一般用来设置背景图像的位置。一般有两个值，如果仅规定了一个值，那么第二个值将默认为center。background-position:top left;还可以用百分比来表示，其中第一个表示水平位置，第二个表示垂直位置：background-position：x% y%;还可以用像素来表示，值表示的意义同上。background-position：50px 100px; 参考资料 腾讯课堂前端NEXT课程资料文档 W3Cschool CSDN网站布局中position的值的用法 我的个人博客：http://chronosblog.top我的微信公众号：runtustory","categories":[{"name":"编程","slug":"编程","permalink":"http://chronosblog.top/categories/编程/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://chronosblog.top/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://chronosblog.top/tags/前端/"}]},{"title":"CSS中的布局详解笔记（一）","date":"2017-08-05T03:36:03.000Z","path":"2017/08/05/cssstudy3/","text":"从盒模型入手整理CSS的布局以及知识点详解。 一、盒模型盒模型，顾名思义，是HTML文档中每个元素在渲染的时候都会被描述成一个矩形盒子，盒模型就是表示每个元素盒子所占空间大小的模型。 盒模型主要有四个部分： margin （外边距） border （边框） padding （内边距） content （内容区域） 一般来说，默认盒模型实际占用空间计算模式为： 水平空间大小 = margin（左右）+ border（左右）+ padding（左右）+ width 垂直空间大小 = margin（上下）+ border （上下）+ padding （上下）+height 因此， 一个元素的实际大小为：border + padding + width/height 在CSS中，名为box-sizing的属性可以改变元素宽高的计算方式。 box-sizing有两个常用的取值： content-box border-boxcontent-box为默认值，实际宽高为上述元素实际大小的计算方式。border-box则是一个元素设置的width和height，不包含其他的。 二、视觉格式化模型元素能够被渲染成一个又一个盒子，那么这些盒子的位置在页面中又是如何摆放的呢？ 在默认情况下，盒子是按照元素在HTML中的先后位置从左至右从上至下一个接着一个排列放置。 但此时也分为两种情况，有的盒子呈水平排列，有的盒子却占满整个一行。这是因为不同的盒子，使用的是不同的格式化上下文来布局。 格式化上下文常见的有两种： 块格式化上下文（BFC） 行内格式化上下文（IFC） 当元素的display值为block、list-item、table、flex、grid时，它是块级元素，每个块级元素至少生成一个块级盒，块级盒参与BFC，被渲染成完整的一个新行。 W3C对于BFC的定义是： 浮动元素和绝对定位元素，非块极盒子的块级容器，以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的块级格式化上下文。在一个块级格式化上下文里，盒子从包含块的顶端开始垂直地一个接一个地排列，两个盒子之间的垂直的间隙是由他们的margin来决定的，两个相邻的块级盒子的垂直外边距会发生叠加。在块级格式化上下文中，每一个盒子的左外边缘会触碰到容器的左边缘（对于从右到左的格式来说，则会触碰到右边缘），即使存在浮动也是如此，除非这个盒子创建一个新的块级格式化上下文。 总结一下BFC的特性： 内部的Box会在垂直方向，从顶部开始一个接一个地放置。 Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生叠加。 每个元素的margin box的左边，与包含块border box的左边相接触，即使存在浮动也是如此。 BFC的区域不会与float box叠加 BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。 计算BFC的高度时，浮动元素也参与计算。 当元素的display值为inline、inline-block、inline-table、inline-flex、inline-grid时，它是行内级元素，行内级元素生成行内级盒，参与IFC，被渲染为水平排列，直到当行被占满然后换行。 总结IFC的渲染规则： 盒子一个接一个地水平摆放，当容器宽度不够时就会换行。 在水平方向上，这些盒的外边距，边框，内边距所占用的空间都会被计算，但行内和的垂直border，padding，margin都会撑开行盒的高度。 在垂直方向上，这些盒可能会以不同形式来对齐，可通过vertical-align来设置，默认对齐为baseline 每一行将生成一个行盒，包括该行所有的盒子，行盒的宽度是由包含块和存在的浮动来决定 行盒一般左右边都贴近其包含块，但是会因为浮动和的存在而发生变化，浮动盒会位于包含块边缘与行盒边缘之间，这样行盒的可用宽度就小于包含块的宽度 当所有盒的总宽度小于行盒的宽度，那么行盒中的水平方向排版有text-align来决定 当所有盒的总宽度超过一个行盒时，就会形成多个行盒，多个行盒互相之间垂直方向不能分离，不能重叠 当一个行内盒超过行盒的宽度时，它会被分割成多个盒，这些盒被分布在多个行盒里，如果一个行内盒不能被分割，那么这个行内盒将溢出这个行盒 行盒的高度由内部元素中实际高度最高的元素计算出来，每个行盒的高度由于内容不一样，所以高度也可能不一样 在一个行盒中，当他包含的内部容器的高度小于行盒的高度的时候，内部容器的垂直位置可由自己的vertical-align属性来确定 在IFC中，是不能存在块级元素的，如果将块级元素放入IFC，那么会被破坏成BFC，而块级元素前的元素或文本和块级元素后的元素或文本将会各自自动产生一个匿名块盒将其包围。 三、一些易混淆的概念块元素与块级元素块级元素：块级元素是那些视觉上会被格式化成块状的元素，也就是会换新行的元素。块元素：块元素是display属性值为block的元素，他应该是块级元素的一个子集。 行内元素与行内及元素行内级元素：行内级元素是不会为自身内容形成新的块，而让内容分布在多行中的元素。行内元素：行内元素仅仅是display值为inline的元素，是行内及元素的一个子集。 block，inline，inline-blockblock和inline这里不再赘述，重点说一下inline-block：inline-block是将元素呈现为inline，但元素的内容却又作为block呈现，既具有block的宽高特性，又具有inline的同行特性。 参考资料： 腾讯课堂前端NEXT课程文档——视觉格式化模型","categories":[{"name":"编程","slug":"编程","permalink":"http://chronosblog.top/categories/编程/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://chronosblog.top/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://chronosblog.top/tags/前端/"}]},{"title":"总结CSS中的单位","date":"2017-08-03T12:00:41.000Z","path":"2017/08/03/cssstudy2/","text":"总结CSS中的单位以及用法。 CSS中的单位pxpx（像素）是CSS中最为常用的一种单位，传统上一个像素对应计算机屏幕上的一个点，对于高清屏则对应更多。 %百分比也较为常用。其中对font-size设置百分比值时，是以浏览器默认字体大小16px为参照计算的。 emem是一种计算方式为相对于父元素的字体大小的单位，1em等于父元素设置的字体大小，如果父元素没有设置字体大小，则继续往父元素查找，直到有设置大小的，若都没有设置大小，则使用浏览器默认大小。 CSS中常用属性里使用em这样计算方式的属性有： border width height padding margin line-height 例如：1234p&#123;font-size: 16px;padding: 1.5em /*此处1.5em=1.5*16px*/&#125; remrem和em类似，也是相对单位。rem的参照物是根元素HTML的font-size，因此，如果改变HTML的font-size值，那么所有使用的rem单位大小都会随着改变，适用于移动端。（不支持IE8以下） v系单位v系单位常用于移动端，是基于浏览器用来显示内容的区域大小，也就是视窗大小来就算的。具体分为4个： vw：基于视窗的宽度计算，1vw等于视窗宽度的百分之一 vh：基于视窗的高度计算，1vh等于视窗高度的百分之一 vmin：基于vw和vh中最小值来计算，1vmin等于最小值的百分之一 vmax：基于vw和vh中最大值来计算，1vmax等于最大值的百分之一 单位运算CSS中可以使用CSS函数calc()来通过计算确定一个属性的值。例如：1width:calc(100%-80px);","categories":[{"name":"编程","slug":"编程","permalink":"http://chronosblog.top/categories/编程/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://chronosblog.top/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://chronosblog.top/tags/前端/"}]},{"title":"总结CSS基础中的一些小坑","date":"2017-08-01T15:45:41.000Z","path":"2017/08/01/cssstudy1/","text":"CSS虽然很有趣，入门也容易，但对于前端菜鸟、初学者来说，还是有一些小坑是无法避免的，这些小坑相对而言更需要去积累和理解，也是比较容易忽略的一些问题，以至于学到后来，因为没有搞定这些小坑而延伸出许多“大坑”，相当影响学习效率。 一、CSS选择器CSS中的选择器大体分为五大类： 基本选择器 关系选择器 伪类选择器 伪元素选择器 属性选择器 这五大类里每一类又分别有很多类型的选择器，可以说是一个庞大的“选择器”家族。然而，在实际使用过程当中，用的最多的其实也就那么几种而已，比如标签选择器，类选择器，ID选择器等。那么，我们在需要使用选择器的时候，优先考虑的究竟是什么呢？这时候有的同学肯定会疑惑，难道不是哪个更方便就用哪个吗？ 其实不然。我们从零学习前端开发，最终的目标实际上是做一个合格的开发者，所以优先考虑的肯定是“合格”二字。所以，在使用选择器的时候，我们要考虑选择器优化这个概念。 对于浏览器来说，解析每种选择器所耗费的时间并不一样，那么如何才能写出最优选择器呢？ (引用内容来源于IMWeb的技术文章) 根据网站效率专家Steve Souders指出，各种CSS选择器的效率由高到低排序如下： id选择器 类选择器 标签选择器 相邻选择器 子选择器 后代选择器 通配符选择器 属性选择器 伪类选择器 假如现在需要对一个p元素来使用选择器： &lt;p id=&quot;text&quot; class=&quot;red&quot;&gt;这是一个段落&lt;p&gt; 我们可以通过很多方法选中它，标签选择器，类选择器，id选择器都能做到，但按照执行效率来说，id选择器是最佳的，其次是类选择器，然后是元素选择，最后才是属性选择器。 这里有一个小例子，作为一个前端新手，我刚开始练习CSS的时候，习惯在例子中使用了通用选择器“*”来清除margin和padding： *{margin: 0; padding: 0;} 直到后来，看到别人清除浏览器默认样式的时候都写一大长串，甚至引入一个专门的CSS文件来用于清除默认样式，我十分不解，用通用选择器岂不是更方便？ 后来才明白，这样做反而是最没有效率的！原因在于浏览器匹配文档中所有的元素后会分别向上逐级匹配，一直到文档的根节点才作罢，这样匹配的开销是非常大的。所以，应当避免使用通用选择器。 还有一个问题很关键：浏览器又是如何识别你写的选择器的呢？ 实际上，浏览器读取你的选择器，遵循的原则是从选择器的右边到左边读取。也就是说，顺序是从右到左。 所以当你给一个元素写了相当多的选择器，浏览器会从右到左来寻找，显然路径链会影响效率。因此，建议选择器的层级最多不要超过四层。 综上所述，在使用选择器的时候，其实要做一个综合考虑，每一次都用最优解来使用，这样才能提高代码的效率。 二、CSS优先级CSS中的优先级大概如下： ！important &gt; style &gt; id选择器 &gt; 类选择器 &gt; 元素选择器 &gt; “*” &gt; 浏览器默认 &gt; 继承 这样的优先级比较方式比较笼统，所以还有一种比较普遍的简化方式： 我们把每一个选择器都用一个数字（权重值）来表示，元素选择器用个位数，类选择器用十位数，id选择器用百位数。 选择器 权重值 id选择器 100 类选择器 10 元素选择器 1 于是，权重的计算我们可以总结如下图所示： 其中，没选中代表的就是继承来的属性。 知道了选择器的优先级，那么元素最终的样式究竟是如何得出的呢？ 我们知道，一个元素的样式来源有： 继承自父级元素的样式 浏览器的默认样式 元素自己声明的样式 最终应用的样式就是通过一系列复杂的计算体系而得到的。而这里面有几个值需要注意。 应用值（used value）、初始值（initial value）、（inherit value）最终应用的样式称之为应用值，如果一个元素声明了样式，那么应用值就是这个声明的样式，但如果没有声明，那应用值又是什么？ 这里还包括了两个特殊的值：继承值和初始值。 一个属性默认是继承的，我们得到的它的父元素的同属性的应用值就叫做继承值。如果属性是默认不继承的，那么就会有一个初始值，这个初始值实际上就是一个默认的值，比如width的初始值是auto。 三、CSS重置有关CSS重置之前已经提到过，就是清除浏览器默认样式。 对于不同的浏览器，其默认样式都是不一样的，而且默认样式有时候实际上就如同画蛇添足一般，清除是非常必要的。 CSS重置分为两种，一种是纠正重置，一种是清零重置 纠正重置，就如字面意思，因为浏览器默认样式有差异的缘故，我们需要来消除这些差异，让页面在不同的浏览器中看起来一致。开源的normalize.css就可以做到这一点，这里不再赘述。 清零重置，就是彻底的去除默认样式，这个可以根据自己的需求来写，也可以参考一些文档，例如：Eric Meyer’s Reset CSS 2.0 我的个人Blog：chronosblog.top我的微信公众号：runtustory","categories":[{"name":"编程","slug":"编程","permalink":"http://chronosblog.top/categories/编程/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://chronosblog.top/tags/CSS/"},{"name":"前端","slug":"前端","permalink":"http://chronosblog.top/tags/前端/"}]},{"title":"杂文随笔分类","date":"2017-07-30T06:54:28.000Z","path":"2017/07/30/zawen/","text":"#这里放杂文随笔这里放杂文随笔","categories":[{"name":"杂文","slug":"杂文","permalink":"http://chronosblog.top/categories/杂文/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://chronosblog.top/tags/随笔/"}]},{"title":"这里是小说连载","date":"2017-07-30T06:52:55.000Z","path":"2017/07/30/novel/","text":"#这里是小说的连载这里是小说的连载","categories":[{"name":"小说","slug":"小说","permalink":"http://chronosblog.top/categories/小说/"}],"tags":[{"name":"小说","slug":"小说","permalink":"http://chronosblog.top/tags/小说/"}]},{"title":"编程分类","date":"2017-07-30T06:49:16.000Z","path":"2017/07/30/code/","text":"#这里面放编程类的文章这里面放编程类的文章","categories":[{"name":"编程","slug":"编程","permalink":"http://chronosblog.top/categories/编程/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://chronosblog.top/tags/编程/"}]}]